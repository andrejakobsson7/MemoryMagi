// <auto-generated />
using System;
using MemoryMagi.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MemoryMagi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240913142138_AlterImages")]
    partial class AlterImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MemoryMagi.Models.AllowedUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.HasKey("UserId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("AllowedUsers");
                });

            modelBuilder.Entity("MemoryMagi.Models.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "https://img.pixers.pics/pho_wat(s3:700/FO/53/42/44/83/700_FO53424483_d7f9c14e67bdba97211d5192a12e242c.jpg,700,654,cms:2018/10/5bd1b6b8d04b8_220x50-watermark.png,over,480,604,jpg)/posters-bar-frukt-grupp-tecknad-illustration.jpg.jpg",
                            Name = "Frukt"
                        },
                        new
                        {
                            Id = 2,
                            Image = "https://img.pixers.pics/pho_wat(s3:700/FO/63/25/91/96/700_FO63259196_e707a3a294a157465cac9e30e69ed23c.jpg,700,648,cms:2018/10/5bd1b6b8d04b8_220x50-watermark.png,over,480,598,jpg)/posters-grattis-safari-djur-tecknad.jpg.jpg",
                            Name = "Djur"
                        },
                        new
                        {
                            Id = 3,
                            Image = "https://thumbs.dreamstime.com/b/kawaii-cute-cars-sticker-image-style-art-meme-animated-gifs-isolated-white-background-ai-generated-png-283486842.jpg",
                            Name = "Bilar"
                        },
                        new
                        {
                            Id = 4,
                            Image = "https://t3.ftcdn.net/jpg/06/11/65/14/360_F_611651420_EgCnaCL6KDm3ukuMNmecVkaCHcfmbO6u.jpg",
                            Name = "Superhjältar"
                        });
                });

            modelBuilder.Entity("MemoryMagi.Models.DifficultyLevelModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("int")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("NrOfCards")
                        .HasColumnType("int")
                        .HasColumnName("nr_of_cards");

                    b.HasKey("Id");

                    b.ToTable("DifficultyLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = 1,
                            Name = "Lätt",
                            NrOfCards = 4
                        },
                        new
                        {
                            Id = 2,
                            Level = 2,
                            Name = "Medium",
                            NrOfCards = 8
                        },
                        new
                        {
                            Id = 3,
                            Level = 3,
                            Name = "Svår",
                            NrOfCards = 15
                        });
                });

            modelBuilder.Entity("MemoryMagi.Models.GameModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("created_by");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("int")
                        .HasColumnName("difficulty_level_id");

                    b.Property<string>("GameType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("game_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DifficultyLevelId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            DifficultyLevelId = 1,
                            GameType = "public",
                            Name = "Goda frukter"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            DifficultyLevelId = 1,
                            GameType = "public",
                            Name = "Marvel"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            DifficultyLevelId = 2,
                            GameType = "public",
                            Name = "Djur på bonnagården"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            DifficultyLevelId = 3,
                            GameType = "public",
                            Name = "Bilar man hade velat ha"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            DifficultyLevelId = 1,
                            GameType = "public",
                            Name = "DC"
                        });
                });

            modelBuilder.Entity("MemoryMagi.Models.ItemModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            Image = "https://img.freepik.com/free-vector/sticker-design-with-apple-isolated_1308-66383.jpg?t=st=1725441600~exp=1725445200~hmac=2b353ba4b82a3ad64efda6bf389b2541f080abace5c4b2650920cfd765f9e236&w=740",
                            Name = "Äpple"
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1,
                            Image = "https://img.freepik.com/premium-vector/drawing-pineapple-with-green-top-yellow-top_1166763-24137.jpg?w=740",
                            Name = "Ananas"
                        },
                        new
                        {
                            Id = 3,
                            GameId = 1,
                            Image = "https://img.freepik.com/premium-vector/strawberry-clipart-vector-illustration-white-background_1280610-709.jpg?w=740",
                            Name = "Jordgubbar"
                        },
                        new
                        {
                            Id = 4,
                            GameId = 1,
                            Image = "https://static.vecteezy.com/ti/gratis-vektor/p3/19862411-ljuv-hallon-ikon-klamma-konst-vektor-illustration-i-tecknad-serie-animering-frukt-och-vegetabiliska-vector.jpg",
                            Name = "Hallon"
                        },
                        new
                        {
                            Id = 5,
                            GameId = 3,
                            Image = "https://img.freepik.com/free-vector/hand-drawn-flat-design-robin-collection_23-2149145170.jpg?t=st=1725442349~exp=1725445949~hmac=e0c69eb898156b90b344b8315ad7f4c468d28130b0d358eb7ba220eafc748e98&w=740",
                            Name = "Fågel"
                        },
                        new
                        {
                            Id = 6,
                            GameId = 3,
                            Image = "https://img.freepik.com/premium-vector/cute-cat-collection-isolated-white-background_703032-4100.jpg?w=1380",
                            Name = "Katt"
                        },
                        new
                        {
                            Id = 7,
                            GameId = 3,
                            Image = "https://img.freepik.com/premium-vector/cartoon-illustration-brown-white-cow_1216680-373.jpg?w=740",
                            Name = "Ko"
                        },
                        new
                        {
                            Id = 8,
                            GameId = 3,
                            Image = "https://img.freepik.com/premium-vector/cute-lion-cartoon-white-background_29190-8567.jpg?w=740",
                            Name = "Lejon"
                        },
                        new
                        {
                            Id = 9,
                            GameId = 3,
                            Image = "https://img.freepik.com/free-vector/monkey-cartoon-character-sticker_1308-76562.jpg?t=st=1725442733~exp=1725446333~hmac=261a58dc78d31af291802ee3e0912fd5f2f294d1d32da3a27fb91b75c6f30dfe&w=740",
                            Name = "Apa"
                        },
                        new
                        {
                            Id = 10,
                            GameId = 3,
                            Image = "https://img.freepik.com/premium-vector/cartoon-dog-with-cartoon-face-word-wolf-it_1025542-56600.jpg?w=740",
                            Name = "Varg"
                        },
                        new
                        {
                            Id = 11,
                            GameId = 3,
                            Image = "https://static.vecteezy.com/ti/gratis-vektor/p3/12507322-sot-kanin-tecknad-serie-pa-vit-bakgrund-vector.jpg",
                            Name = "Kanin"
                        },
                        new
                        {
                            Id = 12,
                            GameId = 3,
                            Image = "https://static.vecteezy.com/ti/gratis-vektor/p3/6325976-elefant-tecknad-fargad-clipart-illustration-gratis-vector.jpg",
                            Name = "Elefant"
                        },
                        new
                        {
                            Id = 13,
                            GameId = 4,
                            Image = "https://img.freepik.com/premium-vector/red-car-with-license-plate-number-3_1128391-17709.jpg?w=740",
                            Name = "Sportbil"
                        },
                        new
                        {
                            Id = 14,
                            GameId = 4,
                            Image = "https://img.freepik.com/free-vector/boy-driving-vintage-car-cartoon-design_1308-107242.jpg?t=st=1725453109~exp=1725456709~hmac=81d598da00b7fdb14f45c280734502f48e4d747188fd295ce35c102627bb0ad4&w=1800",
                            Name = "Cabriolet"
                        },
                        new
                        {
                            Id = 15,
                            GameId = 4,
                            Image = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRtZSSxfN4KGqrhe4o4hCapFOKvmmfN9EJL1g&s",
                            Name = "Racerbil"
                        },
                        new
                        {
                            Id = 16,
                            GameId = 4,
                            Image = "https://img.freepik.com/premium-vector/red-car-with-surfboard-top-it_1013341-387239.jpg?w=740",
                            Name = "Stadsjeep"
                        },
                        new
                        {
                            Id = 17,
                            GameId = 4,
                            Image = "https://img.freepik.com/free-vector/black-sedan-car-isolated-white-background_1308-75583.jpg?t=st=1725452945~exp=1725456545~hmac=961c6db37d955480177b2eb6d6c6b7571efb30f5ff94d5fdd41dcc65c2c28521&w=1380",
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 18,
                            GameId = 4,
                            Image = "https://img.freepik.com/free-vector/classic-green-vintage-car-illustration_1308-164648.jpg?t=st=1725452987~exp=1725456587~hmac=dc808c875da97d90cb4641fdebe8f6718e4ff0dab6cb8aab516ef3495ffdb0f8&w=1380",
                            Name = "Veteranbil"
                        },
                        new
                        {
                            Id = 19,
                            GameId = 4,
                            Image = "https://e7.pngegg.com/pngimages/699/627/png-clipart-black-batman-batmobile-illustration-batman-batmobile-superhero-drawing-cartoon-car-mammal-heroes.png",
                            Name = "Batmobil"
                        },
                        new
                        {
                            Id = 20,
                            GameId = 4,
                            Image = "https://media.istockphoto.com/id/508838370/sv/vektor/golf-cart-with-shadow.jpg?s=612x612&w=0&k=20&c=OYJWkcZXA2X0Q0ubspPWSnG55go2VMu_lEnvCAVSHUU=",
                            Name = "Golfbil"
                        },
                        new
                        {
                            Id = 21,
                            GameId = 4,
                            Image = "https://static.vecteezy.com/system/resources/thumbnails/021/514/981/small_2x/van-car-cartoon-icon-illustration-vehicle-transportation-icon-concept-isolated-premium-flat-cartoon-style-vector.jpg",
                            Name = "Van"
                        },
                        new
                        {
                            Id = 22,
                            GameId = 4,
                            Image = "https://thumbs.dreamstime.com/b/ford-mustangfastback-1965-28658306.jpg",
                            Name = "Muskelbil"
                        },
                        new
                        {
                            Id = 23,
                            GameId = 4,
                            Image = "https://images.squarespace-cdn.com/content/v1/6598c8e83ff0af0197ff19f9/1709281356076-X4X5JKNF1FDD50SKVD0D/1981-delorean-back-to-the-future-_0008_9.jpg",
                            Name = "Framtidsbil"
                        },
                        new
                        {
                            Id = 24,
                            GameId = 4,
                            Image = "https://m.media-amazon.com/images/I/71zkRuxSezL._AC_UF894,1000_QL80_.jpg",
                            Name = "Ghostbusters-bil"
                        },
                        new
                        {
                            Id = 25,
                            GameId = 4,
                            Image = "https://static.vecteezy.com/ti/gratis-vektor/p1/2687298-monster-truck-cartoon-vehicle-or-car-and-extreme-show-transport-illustration-vector.jpg",
                            Name = "Monstertruck"
                        },
                        new
                        {
                            Id = 26,
                            GameId = 4,
                            Image = "https://images.all-free-download.com/images/graphiclarge/mr_bean_s_car_in_mr_bean_cartoon_movie_icon_flat_handdrawn_classic_sketch_6926445.jpg",
                            Name = "Mr. Beans bil"
                        },
                        new
                        {
                            Id = 27,
                            GameId = 4,
                            Image = "https://www.shutterstock.com/shutterstock/photos/1213775323/display_1500/stock-vector-vector-layout-of-an-suv-hummer-1213775323.jpg",
                            Name = "Hummer"
                        },
                        new
                        {
                            Id = 28,
                            GameId = 2,
                            Image = "https://cdn11.bigcommerce.com/s-36f0xn7qz3/images/stencil/original/products/1038/1663/2366_IronMan_AvengersAssemble_40__71309.1608072851.jpg?c=1",
                            Name = "Iron Man"
                        },
                        new
                        {
                            Id = 29,
                            GameId = 2,
                            Image = "https://cdn11.bigcommerce.com/s-36f0xn7qz3/images/stencil/original/products/1039/1633/2367_CaptainAmerica_AvengersAssemble_46__81672.1608071746.jpg?c=1",
                            Name = "Captain America"
                        },
                        new
                        {
                            Id = 30,
                            GameId = 2,
                            Image = "https://cdn11.bigcommerce.com/s-36f0xn7qz3/images/stencil/original/products/1040/1678/2368_Thor_AvengersAssemble_40__24328.1608073129.jpg?c=1",
                            Name = "Thor"
                        },
                        new
                        {
                            Id = 31,
                            GameId = 2,
                            Image = "https://cdn11.bigcommerce.com/s-36f0xn7qz3/images/stencil/1060x1060/products/1136/1672/2481_Spider-Man_2017_40__97689.1608073067.jpg?c=1",
                            Name = "Spider-Man"
                        },
                        new
                        {
                            Id = 32,
                            GameId = 5,
                            Image = "https://m.media-amazon.com/images/S/pv-target-images/9fd172a452587004a54251df846efdb16b3f2e808718c9dca35fe7ff68f508ac._SX1080_FMjpg_.jpg",
                            Name = "Batman"
                        },
                        new
                        {
                            Id = 33,
                            GameId = 5,
                            Image = "https://cdn.flickeringmyth.com/wp-content/uploads/2021/09/superman-blu-ray-1629903679988.jpg",
                            Name = "Superman"
                        },
                        new
                        {
                            Id = 34,
                            GameId = 5,
                            Image = "https://experiencethewonder.com/wp-content/uploads/2004/06/2004-WBCP-Justice-League-Unlimited-Animated-Style-Guide-Wonder-Woman-010.jpg",
                            Name = "Wonder Woman"
                        },
                        new
                        {
                            Id = 35,
                            GameId = 5,
                            Image = "https://static.wikia.nocookie.net/heroes-and-villain/images/a/a2/Profile_-_Wally_West.png/revision/latest?cb=20220610164521",
                            Name = "The Flash"
                        });
                });

            modelBuilder.Entity("MemoryMagi.Models.ResultModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatePlayed")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_played");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("game_id");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit")
                        .HasColumnName("passed");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time")
                        .HasColumnName("time");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("MemoryMagi.Models._2._0.AchievementModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image-url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Achievements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Klara ditt första spel",
                            ImageUrl = "Achievement1Game.jpg",
                            Name = "Första steget!"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Klara totalt 5 spel",
                            ImageUrl = "Achievement5Game.jpg",
                            Name = "Lärling"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Klara total 20 spel",
                            ImageUrl = "Achievement20Game.jpg",
                            Name = "Magiker"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Klara total 100 spel",
                            ImageUrl = "Achievement100Game.jpg",
                            Name = "Magi Mästare"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Klara ett spel under 5 minuter",
                            ImageUrl = "Achievement3minGame.jpg",
                            Name = "Tidens lärling"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Klara ett spel under 1 minut",
                            ImageUrl = "Achievement60secGame.jpg",
                            Name = "Tidens Väktare"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Klara ett spel under 30 sekunder",
                            ImageUrl = "Achievement30secGame.jpg",
                            Name = "Tidens Härskare"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Klara ett spel med \"Lätt\" svårighetsgrad",
                            ImageUrl = "AchievementEasyGame.jpg",
                            Name = "Lärlingens Utmaning"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Klara ett spel med \"Medium\" svårighetsgrad",
                            ImageUrl = "AchievementMediumGame.jpg",
                            Name = "Trollkarlens Utmaning"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Klara ett spel med \"Svår\" svårighetsgrad",
                            ImageUrl = "AchievementHardGame.jpg",
                            Name = "Mästarens Utmaning"
                        });
                });

            modelBuilder.Entity("MemoryMagi.Models._2._0.UserAchievement", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("user_id");

                    b.Property<int>("AchievementId")
                        .HasColumnType("int")
                        .HasColumnName("achievement_id");

                    b.Property<DateOnly>("AchievementDate")
                        .HasColumnType("date")
                        .HasColumnName("achievement_date");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MemoryMagi.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("MemoryMagi.Models.AllowedUser", b =>
                {
                    b.HasOne("MemoryMagi.Models.GameModel", "Game")
                        .WithMany("AllowedUsers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryMagi.Models.ApplicationUser", "User")
                        .WithMany("AllowedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemoryMagi.Models.GameModel", b =>
                {
                    b.HasOne("MemoryMagi.Models.CategoryModel", "Category")
                        .WithMany("Games")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryMagi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("MemoryMagi.Models.DifficultyLevelModel", "DifficultyLevel")
                        .WithMany("Games")
                        .HasForeignKey("DifficultyLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DifficultyLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemoryMagi.Models.ItemModel", b =>
                {
                    b.HasOne("MemoryMagi.Models.GameModel", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("MemoryMagi.Models.ResultModel", b =>
                {
                    b.HasOne("MemoryMagi.Models.GameModel", "Game")
                        .WithMany("Results")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryMagi.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MemoryMagi.Models._2._0.UserAchievement", b =>
                {
                    b.HasOne("MemoryMagi.Models._2._0.AchievementModel", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MemoryMagi.Models.ApplicationUser", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MemoryMagi.Models.CategoryModel", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("MemoryMagi.Models.DifficultyLevelModel", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("MemoryMagi.Models.GameModel", b =>
                {
                    b.Navigation("AllowedUsers");

                    b.Navigation("Items");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("MemoryMagi.Models._2._0.AchievementModel", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("MemoryMagi.Models.ApplicationUser", b =>
                {
                    b.Navigation("AllowedUsers");

                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
